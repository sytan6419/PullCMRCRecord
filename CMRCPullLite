import os

try:
    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
except Exception as e:
    print str(e)
    print 'Not found module'
    print 'Downloading from python lin'
    os.system('pip install selenium')
    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys

from datetime import *
import datetime
import openpyxl
from openpyxl.chart import BarChart, Series, Reference
import time
import platform

datetopull = 1
pidtoread = ''
areatopull = 'pcb%'
link_home = 'http://cpp.cisco.com/CMRC/rpEditorMan.aspx?ReportName=cmrcUUT_History'

def pullcmrc(sernumtopull='sal%'):
    list = []
    # cmrc date format = month/date/year PDT time.
    date = datetime.datetime.now()

    if date.hour < 16:
        date_from = '%d/%d/%d' % (date.month, date.day - (datetopull - 1), date.year)
        date_to = '%d/%d/%d' % (date.month, date.day, date.year)
    else:
        date_from = '%d/%d/%d' % (date.month, date.day - datetopull, date.year)
        date_to = '%d/%d/%d' % (date.month, date.day, date.year)

    print 'we are looking for date %s to %s' % (date_from, date_to)

    if not sernumtopull:
        try:
            # create a textfile for variable input
            f = open('pid.txt', 'r')
            info = f.read()
            f.close()
            for line in info.splitlines():
                global pidtoread
                pidtoread += ',' + line
        except IOError:
            print 'Please create tester.txt file on the same directory'
            exit(0)
        except ValueError:
            print 'PID not found'
            exit(0)

            
    for retry in range(1, 4):
        try:
            ##                # check for the OS, if it is windows, then call the relative driver
            ##                if platform.system() == 'Windows':
            ##                    path2chromeexe = os.getcwd()+'\webdriver\chromedriver_win.exe'
            ##                elif platform.system() == 'Linux':
            ##                    path2chromeexe = ''
            ##                else: #for mac, check it later
            ##                    path2chromeexe = os.getcwd()+'\webdriver\chromedriver_mac'
            ##                    
            # path2phantom = os.getcwd() + "\webdriver\phantomjs.exe"
            # browser = webdriver.PhantomJS(executable_path=path2phantom)
            browser = webdriver.Chrome(r'C:\chromedriver.exe')
            # browser = webdriver.Firefox()
            browser.get(link_home)
            assert 'cmrcLogin' in browser.title
            browser.find_element_by_name('tbxUserID').clear()
            browser.find_element_by_name('tbxUserID').send_keys('sytan')
            browser.find_element_by_name('txtPassword').send_keys('$Flex1234')
            browser.find_element_by_name('BtnLogin').click()

            if not sernumtopull:
                assert 'rpEditorMan' in browser.title
                print 'Logged In'

                browser.find_element_by_name('ctrlItemSelection:txtSerialNumber').send_keys('sal%')
                browser.find_element_by_name('ctrlItemSelection:txtUUTType').send_keys(pidtoread)
                #browser.find_element_by_name('ctrlItemSelection:txtUUTType').send_keys("CRS-16-PRP-12G=,CRS-16-PRP-6G=,CRS-FP140=,CRS-MSC-140G=")
                browser.find_element_by_name('ctrlItemSelection:txtTestArea').send_keys(areatopull)
                browser.find_element_by_name('ctrlItemSelection:txtCM').send_keys('solpen')
                browser.find_element_by_name('ctrlItemSelection:txtMachine').send_keys('%')
                browser.find_element_by_name('Ctrldateselection:cpDateFrom').clear()
                browser.find_element_by_name('Ctrldateselection:cpDateTo').clear()
                browser.find_element_by_name('Ctrldateselection:cpDateFrom').send_keys(date_from)
                browser.find_element_by_name('Ctrldateselection:cpDateTo').send_keys(date_to)
                browser.find_element_by_xpath('//img[contains(@src,"Images/btnSubmit.gif")]').click()

                assert 'rpUUT_HistoryData' in browser.title
                print 'done loading'

                # please enable the auto save all file in ur firefox setting if the auto download doesn't work
                browser.find_element_by_id('CtrlGridColDisplay1_btnExportToExcel').click()
                print 'exporting data to excel file ....'
                print 'hold on, we are writing data to info.txt'
        
                # writing info to txt file                
                # with open("cmrc_read_{}.txt".format(date_to), "w") as text_file:
                #    text_file.write(browser.find_element_by_xpath("html").text)
                # print 'done writing, will read it soon!'

                # print 'logging out'
                # browser.find_element_by_link_text("Logout").click();
                # print 'will sleep here for 3s to wait download done'
                time.sleep(3)
                # browser.quit()
            else:
                assert 'cmrcMain' in browser.title
                print 'Logged In'
                browser.find_element_by_name('tbxSearchValue').send_keys(sernumtopull)
                browser.find_element_by_xpath('//img[contains(@src,"Images/btnSubmit.gif")]').click()
            break
        except AssertionError:
            print 'assertionerror'
            print 'Can\'t get expected output, retrying for %s times' % (retry)
        except Exception, e:
            print str(e)
            print 'Did u mistakenly close on the web browser?'
            print 'Nvm, we are retrying for %s times' % (retry)
    else:
        print 'enough of trying ... we are going to terminate this!!!'
    return

#
# def AnalyzeCMRC():
#     tester = []
#     for k, v in to_be_tested.iteritems():
#         tester.append(k)
#
#     to_be_tested_2 = {}
#     for test in tester:
#         try:
#             g = open('{}.txt'.format(test), 'r')
#             g = g.read()
#             keyword = ['Aborted', 'Passed', 'Failed']
#             count = 0
#             for i in g.splitlines():
#                 if any(x for x in keyword if x in i):
#                     count += 1
#             print 'Done for {}.txt'.format(test)
#             if to_be_tested.has_key(test):
#                 new_key = str(to_be_tested.get(test)) + '\t' + str(count)
#                 to_be_tested_2.update({test: new_key})
#         except IOError:
#             print '*********************************************'
#             print 'No tester file found for {}.txt'.format(test)
#             print '*********************************************'
#
#     print 'Done for all'
#     hh = open('final.txt', 'w')
#     for k, v in to_be_tested_2.iteritems():
#         hh.write(k + '\t' + v + '\n')
#     print 'done writing to file'
#     hh.close()
#
#     return
#
#
# def ExportToExcel():
#     h = open('final.txt', 'r')
#     h = h.read()
#
#     book = openpyxl.Workbook()
#     sheet1 = book.active
#     sheet1.cell(column=1, row=1, value='Server')
#     sheet1.cell(column=2, row=1, value='Consumption')
#     sheet1.cell(column=3, row=1, value='Output')
#     sheet1.cell(column=4, row=1, value='Average')
#     sername = [sername.split()[0] for sername in h.splitlines()]
#     consump = [float(consump.split()[1].replace(',', '')) for consump in h.splitlines()]
#     output = [int(output.split()[2]) for output in h.splitlines()]
#
#     for row in range(len(sername)):
#         _ = sheet1.cell(column=1, row=row + 2, value="%s" % sername[row])
#         _ = sheet1.cell(column=2, row=row + 2, value=consump[row])
#         _ = sheet1.cell(column=3, row=row + 2, value=output[row])
#         _ = sheet1.cell(column=4, row=row + 2, value="=B%d/C%d" % (row + 2, row + 2))
#
#     chart1 = BarChart()
#     chart1.type = "col"
#     chart1.style = 10
#     chart1.title = "Server vs Consumption"
#     chart1.y_axis.title = 'Consumption'
#     chart1.x_axis.title = 'Server Name'
#
#     data = Reference(sheet1, min_col=2, min_row=1, max_row=len(sername) + 1, max_col=3)
#     cats = Reference(sheet1, min_col=1, min_row=2, max_row=len(sername) + 1)
#     chart1.add_data(data, titles_from_data=True)
#     chart1.set_categories(cats)
#     chart1.shape = 4
#     sheet1.add_chart(chart1, "I1")
#
#     chart1 = BarChart()
#     chart1.type = "col"
#     chart1.style = 10
#     chart1.title = "Server vs Consumption"
#     chart1.y_axis.title = 'Consumption'
#     chart1.x_axis.title = 'Server Name'
#
#     data = Reference(sheet1, min_col=4, min_row=1, max_row=len(sername) + 1, max_col=4)
#     cats = Reference(sheet1, min_col=1, min_row=2, max_row=len(sername) + 1)
#     chart1.add_data(data, titles_from_data=True)
#     chart1.set_categories(cats)
#     chart1.shape = 4
#     sheet1.add_chart(chart1, "I20")
#     global name
#     name = "EnergyConsumption_{}.xlsx".format(datetime.datetime.now().date())
#     book.save(name)
#
#     return


def main():

    while True:
        global sernumtopull
        sernumtopull = raw_input('Check CMRC for sernum? [enter to skip]')
        if len(sernumtopull) == 11 and 'SAL' in sernumtopull.upper():
            print 'Pulling SN detail for %s'%sernumtopull
            global link_home
            link_home = r'http://cpp.cisco.com/CMRC/cmrcMain.aspx'
            break
        elif not sernumtopull:
            print 'checking yield for others'
            break

    if not sernumtopull:
        while True:
            try:
                global datetopull
                datetopull = int(raw_input('How many days do you want to pull?'))
                break
            except:
                print 'The date must be in integer form!'

        while True:
            try:
                global areatopull
                areatopull = str(raw_input('Which area do you want to pull [PCBP2/PCB2C/PCBST/PCBLED/enter for all]?'))
                if areatopull:
                    print 'checking for area %s'%areatopull
                    break
                if not areatopull:
                    areatopull = 'pcb%'
                    print 'checking for all area'
                    break
            except:
                print 'The date must be in string form!'

    pullcmrc(sernumtopull)
    # AnalyzeCMRC()
    # ExportToExcel()
    print 'Completed for all!!!'
    wait_entry = raw_input("Press Enter to terminate")
    if not wait_entry:
        exit(0)
    # os.startfile(name)
    return


main()
